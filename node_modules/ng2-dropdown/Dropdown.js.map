{"version":3,"sources":["../../src/Dropdown.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+E,eAAe,CAAC,CAAA;AAC/F,wCAAsC,2BAA2B,CAAC,CAAA;AAMlE;IAyBI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,kBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QA3B1C,4EAA4E;QAC5E,mBAAmB;QACnB,4EAA4E;QAG5E,gBAAW,GAAG,IAAI,CAAC;QAGnB,oBAAe,GAAG,KAAK,CAAC;QAGxB,WAAM,GAAG,IAAI,mBAAY,EAAE,CAAC;QAG5B,YAAO,GAAG,IAAI,mBAAY,EAAE,CAAC;IAc7B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,uBAAI,GAAJ;QACI,IAAM,OAAO,GAAgB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC3D,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC;IAED,wBAAK,GAAL;QACI,IAAM,OAAO,GAAgB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC3D,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,2BAAQ,GAAR;QACI,IAAM,OAAO,GAAgB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC3D,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,mCAAgB,GAAhB,UAAiB,OAAoB;QACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC;QAEjB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IApDD;QAAC,YAAK,CAAC,gBAAgB,CAAC;;iDAAA;IAGxB;QAAC,YAAK,CAAC,uBAAuB,CAAC;;qDAAA;IAG/B;QAAC,aAAM,EAAE;;4CAAA;IAGT;QAAC,aAAM,EAAE;;6CAAA;IAOT;QAAC,mBAAY,CAAC,iDAAuB,CAAC;;qDAAA;IA1B1C;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,QAAQ,EAAE,UAAU;SACvB,CAAC;;gBAAA;IA6DF,eAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,gBAAQ,WA4DpB,CAAA","file":"Dropdown.js","sourcesContent":["import {Directive, ElementRef, ContentChild, Output, EventEmitter, Input} from \"@angular/core\";\nimport {DropdownNotClosableZone} from \"./DropdownNotClosableZone\";\n\n@Directive({\n    selector: \"[dropdown]\",\n    exportAs: \"dropdown\"\n})\nexport class Dropdown {\n\n    // -------------------------------------------------------------------------\n    // Inputs / Outputs\n    // -------------------------------------------------------------------------\n\n    @Input(\"dropdownToggle\")\n    toggleClick = true;\n\n    @Input(\"dropdownFocusActivate\")\n    activateOnFocus = false;\n\n    @Output()\n    onOpen = new EventEmitter();\n\n    @Output()\n    onClose = new EventEmitter();\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    @ContentChild(DropdownNotClosableZone)\n    notClosableZone: DropdownNotClosableZone;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private elementRef: ElementRef) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    open() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        element.classList.add(\"open\");\n        this.onOpen.emit(undefined);\n    }\n\n    close() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        element.classList.remove(\"open\");\n        this.onClose.emit(undefined);\n    }\n\n    isOpened() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        return element.classList.contains(\"open\");\n    }\n\n    isInClosableZone(element: HTMLElement) {\n        if (!this.notClosableZone)\n            return false;\n\n        return this.notClosableZone.contains(element);\n    }\n\n}"],"sourceRoot":""}